# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Customized for the Solarized color scheme by Sean O'Neil

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	if [ "$TERM_PROGRAM" == "Apple_Terminal" ]; then
		export TERM=xterm-256color
	else
		export TERM=xterm-256color
	fi
fi

# Solarized Theme
if tput setaf 1 &> /dev/null; then
	tput sgr0
	if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
	  BASE03=$(tput setaf 234)
	  BASE02=$(tput setaf 235)
	  BASE01=$(tput setaf 240)
	  BASE00=$(tput setaf 241)
	  BASE0=$(tput setaf 244)
	  BASE1=$(tput setaf 245)
	  BASE2=$(tput setaf 254)
	  BASE3=$(tput setaf 230)
	  YELLOW=$(tput setaf 136)
	  ORANGE=$(tput setaf 166)
	  RED=$(tput setaf 160)
	  MAGENTA=$(tput setaf 125)
	  VIOLET=$(tput setaf 61)
	  BLUE=$(tput setaf 33)
	  CYAN=$(tput setaf 37)
	  GREEN=$(tput setaf 64)
	else
	  BASE03=$(tput setaf 8)
	  BASE02=$(tput setaf 0)
	  BASE01=$(tput setaf 10)
	  BASE00=$(tput setaf 11)
	  BASE0=$(tput setaf 12)
	  BASE1=$(tput setaf 14)
	  BASE2=$(tput setaf 7)
	  BASE3=$(tput setaf 15)
	  YELLOW=$(tput setaf 3)
	  ORANGE=$(tput setaf 9)
	  RED=$(tput setaf 1)
	  MAGENTA=$(tput setaf 5)
	  VIOLET=$(tput setaf 13)
	  BLUE=$(tput setaf 4)
	  CYAN=$(tput setaf 6)
	  GREEN=$(tput setaf 2)
	fi
	BOLD=$(tput bold)
	RESET=$(tput sgr0)
else
	# Linux console colors. I don't have the energy
	# to figure out the Solarized values
	MAGENTA="\033[1;31m"
	ORANGE="\033[1;33m"
	GREEN="\033[1;32m"
	PURPLE="\033[1;35m"
	WHITE="\033[1;37m"
	BOLD=""
	RESET="\033[m"
fi

GREPPRG="/usr/bin/grep"

function is_on_git() {
  git rev-parse 2> /dev/null
}

function parse_git_dirty() {
  [[ $(git status 2> /dev/null | tail -n1) != *"nothing to commit"* ]] && echo "±"
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

# Rename screen window
function rename_screen_tab () { echo -ne "\x1bk$@\x1b\\"; return 0; }

function is_on_git() {
  git rev-parse 2> /dev/null
}

function parse_git_dirty() {
  [[ $(git status 2> /dev/null | tail -n1) != *"nothing to commit"* ]] && echo "±"
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

# Rename screen window
function rename_screen_tab () { echo -ne "\x1bk$@\x1b\\"; return 0; }

# hostname color depending, red for prod servers, yellow for corp servers, violet other
if [[ "$HOSTNAME" =~ prod ]]; then
	HOSTCOLOR=$RED
elif [[ "$HOSTNAME" =~ corp ]]; then
	HOSTCOLOR=$YELLOW
else
	HOSTCOLOR=$GREEN
fi

MYHOST=$(echo $HOSTNAME | sed 's/[.][^.]*[.][^.]*$//')
PS1="\[${BOLD}${YELLOW}\]\d "
PS1="$PS1\A "
PS1="$PS1\[$GREEN\]\w"
PS1="$PS1\$(is_on_git && [[ -n \$(git branch 2> /dev/null) ]] && echo \"\[$BASE2\]:\[$BLUE\]\")\$(parse_git_branch)"
PS1="$PS1\n"
PS1="$PS1\[$VIOLET\]\u"
PS1="$PS1\[$BASE1\]@"
PS1="$PS1\[$HOSTCOLOR\]$MYHOST"
PS1="$PS1\[$BASE2\] >\[$RESET\] "

# Previous one line
# PS1="\[${BOLD}${VIOLET}\]\u"
# PS1="$PS1\[$BASE1\]@"
# PS1="$PS1\[$HOSTCOLOR\]\h"
# PS1="$PS1\[$BASE2\]:"
# PS1="$PS1\[$GREEN\]\w"
# PS1="$PS1\[$BASE1\]\$([[ -n \$(git branch 2> /dev/null) || \$(svn info 2> /dev/null ) ]] && echo \" on \")"
# PS1="$PS1\[$YELLOW\]\$(parse_cms_branch)"
# PS1="$PS1\[$BASE1\]\n\$ "
# PS1="$PS1\[$RESET\]"

if [ $TERM == 'screen' ] ; then
  PROMPT_COMMAND='rename_screen_tab ${MYHOST}'
fi
